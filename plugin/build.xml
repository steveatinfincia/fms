<?xml version="1.0"?>
<!-- ant build file for KeyUtils -->

<project name="FMS" default="dist" basedir=".">
	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet-ext.jar"/>
	<!--
	<property name="svn.revision" value="@custom@"/>
	-->
	<property name="source-version" value="1.6"/>
	<property name="target-version" value="1.6"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="dist" location="dist/"/>
	<property name="src" location="src/"/>
	<property name="bin" location="bin/"/>
	<!--
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="version.src" value="plugins/KeyUtils/Version.java" />
	<property name="version.build" value="plugins/KeyUtils/Version.class" />
	-->
	<!--
	<available file="src/plugins/KeyUtils/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>
	-->
	<!--
	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="- -always" /> fixdash
		<arg value="- -abbrev=4" /> fixdash
		<arg value="- -dirty" /> fixdash
	</exec>
	-->
	<!--
	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>
	-->

	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${dist}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
		<echo message="Using ${freenet-ext.location} as freenet-ext.jar"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="mkdir" >
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->

		<!-- Create the Version file with patched revision number in ${build} -->
		<!--
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>
		-->

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<!--
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>
		-->

		<mkdir dir="${build}/plugins/FMS/resources"/>
		<copy todir="${build}/plugins/FMS/resources" overwrite="on">
			<fileset dir="../" includes="*template.htm,espeak-data/**,fonts/**,images/**,styles/**,translations/**"/>
		</copy>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="${src}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="${version.src}"/>
		</javac>
	</target>

	<!-- ================================================== -->
	<!--
	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<javac srcdir="src/" destdir="${build-test}" debug="on" optimize="on" source="1.5">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*Test.java"/>
		</javac>
	</target>
	-->
	<!--
	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<pathelement location="${freenet-ext.location}"/>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>

			<formatter type="plain" usefile="false"/>

			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>
	-->

	<!-- ================================================== -->
	<!--<target name="dist" depends="clean,compile,junit"-->
	<target name="dist" depends="clean,compile"
		description="generate the distribution" >
		<jar jarfile="${dist}/FMS.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.FMS.FMSPlugin"/>
			</manifest>
			<!--<fileset dir="src/" casesensitive="no">
				<include name="**/*.txt"/>
			</fileset>-->
			<fileset dir="${build}/"/>
			<fileset dir="${bin}/"/>
			<!--<fileset dir="rez/" />-->
		</jar>
		<!--
		<zip destfile="${dist}/KeyUtils-src.zip" filesonly="true" compress="true">
			<zipfileset dir="."
				prefix = ""
				excludes=".*"
				includes="src/**/* rez/**/* build.xml" />
		</zip>
		-->
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${dist}"/>
	</target>
</project>
